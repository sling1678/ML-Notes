<section xml:id="sec-useful-descriptive-statistics-tools"  xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Useful Descriptive Statistics Tools</title>
  <introduction>
  <p>
    Here, I want provide a list of data analysis tools that have emerged as important resources for data scientists and can be very useful for machine learning engineer. Among many resources, let us look at just a few important ones.
  </p>
  </introduction>
  <subsection xml:id="subsec-Pandas">
    <title>Pandas</title>
      <introduction>
        <p>
          Pandas is a powerful Python library for data manipulation and analysis. It provides two core data structures:
          <ol>
            <li>
              <p>
                <alert>Series</alert>: A one-dimensional labeled array.
              </p>
            </li>
            <li>
              <p>
                <alert>DataFrame</alert>: A two-dimensional labeled table (think Excel or SQL table in Python).
              </p>
            </li>
          </ol>
        </p>
        <p> 
          Pandas is designed for <alert>cleaning</alert>, <alert>transforming</alert>, <alert>analyzing</alert>, and <alert>visualizing</alert> data efficiently. Whether you're exploring a dataset, preprocessing features for machine learning, or analyzing business metrics, Pandas will likely be your go-to tool.
        </p>
        </introduction>       
        <p>
          <alert>Why Use Pandas?</alert>
        </p>        
        <ul>
          <li>
            <p>
              Handles structured data easily.
            </p>
          </li>
          <li>
            <p>
              Works well with CSV, Excel, JSON, SQL, and more.
            </p>
          </li>
          <li>
            <p>
              Integrates seamlessly with NumPy, Matplotlib, Scikit-learn, and others.
            </p>
          </li>
          <li>
            <p>
              Fast, expressive, and readable.
            </p>
          </li>
        </ul>
        <p>
            <alert>A Simple Example</alert>: Let's walk through a simple example of a data that is presented to us in a table form with each column referring to one property or feature or variables in the data. Each row is one datapoint, with values of different variables across the columns. You can feed that data as a Python dictionay or a csv file or an excel file. Here, we keep it simple and feed the data as a dictionary.
        </p>
        <program language="Python">
            <code>
                import pandas as pd
                data = {
                    'Name': ['Alice', 'Bob', 'Carol', 'Dave'],
                    'Age': [25, 30, 27, 22],
                    'Score': [85.5, 90.0, 88.0, 76.5]
                }
                df = pd.DataFrame(data)
                print(df)
            </code>
        </program>
        
        <p>
            This will display the data in a nice table format as in <xref ref="tab-printout-of-dataframe-as-table"/>
        </p>
        <table xml:id="tab-printout-of-dataframe-as-table">
            <title>Printout of the DataFrame df</title>
            <tabular>
                <row>
                    <cell></cell> <cell>Name</cell> <cell>Age</cell> <cell>Score</cell>
                </row>
                <row>
                    <cell>0</cell> <cell>Alice</cell> <cell>25</cell> <cell>85.5</cell>
                </row>                
                <row>
                    <cell>1</cell> <cell>Bob</cell> <cell>30</cell> <cell>90.0</cell>
                </row>
                <row>
                    <cell>2</cell> <cell>Carol</cell> <cell>27</cell> <cell>88.0</cell>
                </row>
                <row>
                    <cell>3</cell> <cell>Dave</cell> <cell>22</cell> <cell>76.5</cell>
                </row>
            </tabular>
        </table>
        <p>
            A great advantage of Pandas DataFrame is that it comes with numerous methods that you can call on a DataFrame to perform various tasks. I will present only a small sample of them and you can go to the <url href="https://pandas.pydata.org/" visual="pandas.pydata.org">Pandas website</url> to expand your knowledge.
        </p>
        <p>
            One thing you can do is to examine data quickly by following commands: 
            <ol>
                <li>
                    <p>
                        df.head(n) : diplay n data rows at the top.
                    </p>
                </li>
                <li>
                    <p>
                        df.tail(m) : display m data rows from the bottom.
                    </p>
                </li>
                <li>
                    <p>
                        df.shape : display the dimensions of the DataFrame; note here you do not have () at the end.
                    </p>
                </li>
                <li>
                    <p>
                        df.columns : names of columns of the DataFrame as a list of strings.
                    </p>
                </li>
                <li>
                    <p>
                        df.info() : Summary of data types and memory usage.
                    </p>
                </li>
                <li>
                    <p>
                        df.describe() : Basic statistics for numeric columns.
                    </p>
                </li>
            </ol>
        </p>
        <p>
            When I run df.describe() on the DataFrame df we set up above, it produces the descriptive statics of the numerical data, i.e., columns Age and Score.
        </p>
        <table>
            <title>Output of df.describe()</title>
            <tabular>
                <row>
                    <cell></cell> <cell>Age</cell> <cell>Score</cell>
                </row>
                <row>
                    <cell>count</cell> <cell>4.000000</cell> <cell>4.000000</cell>
                </row>
                <row>
                    <cell>mean</cell> <cell>26.000000</cell> <cell>85.000000</cell>
                </row>
                <row>
                    <cell>std</cell> <cell>3.366502</cell> <cell>5.958188</cell>
                </row>
                <row>
                    <cell>min</cell> <cell>22.000000</cell> <cell>76.500000</cell>
                </row>
                <row>
                    <cell>25%</cell> <cell>24.250000</cell> <cell>83.250000</cell>
                </row>
                <row>
                    <cell>50%</cell> <cell>26.000000</cell> <cell>86.750000</cell>
                </row>
                <row>
                    <cell>75%</cell> <cell>27.750000</cell> <cell>88.500000</cell>
                </row>
                <row>
                    <cell>max</cell> <cell>30.000000</cell> <cell>90.000000</cell>
                </row>

            </tabular>
        </table>
        <p>
            Perhaps the strongest case for using Pandas is its ability to manipulate and transform data very rapidly with simple commands which can be piped into each other. Let's see some examples of this power of Pandas.
        </p>
        <p>
            You can select one column of interest. Or select multiple columns by passing a list of the names of those columns as a list.  
            <p></p>
            <p>
                score = df['Score']
            </p>
            <p>
                age_score = df[['Age', 'Score']]
            </p>
        </p>
        <p>
            You can filter data based on boolean conditions on the variables.
            <p></p>
            <p>
                df1 = df[df['Age'] &gt; 25]
            </p>
            <p>
                df2 = df[(df['Age'] &gt; 25) &amp; (df['Score'] &gt; 85)]
            </p>
            You can create columns for new variables, e.g. Passed, which has 0 or 1 entry based on the values in the Score column.
            <p>
                df['Passed'] = df['Score'] >= 80
            </p>
            Of course sort data based on a particular row.
            <p>
                df.sort_values(by='Score', ascending=False)
            </p>>
        </p>
        <p>
            Here I am trying to give you a sense of the power and flexibility of the Pandas library. A great book to learn this subject is through two free books.
            <p>
                Python for Data Analysis by Wes McKinney (the creator of Pandas) at <url href="https://wesmckinney.com/book/">the website</url> and Learning Pandas by Michael Heydt at <url href="https://github.com/trenton3983/Learning_Pandas">the website</url> . Additionally, Kaggle offers a free, comprehensive introductory course on Pandas at <url href="https://www.kaggle.com/learn/pandas">this website</url>.  
            </p>
        </p>
        <p>
            Here is a list of useful functions in Pandas. <alert>Grouping and Aggregation:</alert>  grouped = df.groupby('Passed')['Score'].mean(), which groups the data by variable 'Passed' and computes the average score. <alert>Handling Missing Data:</alert> (1) is_null_mask = df.isnull() ceates a boolean mask of missing values in the data, (2) df.dropna(), which remove rows with missing values, (3) df.fillna(0), which replace missing values with 0 or a value of your choice. <alert>Reading/Writing Files</alert>: (1) df = pd.read_csv('data.csv')    for reading from a CSV file, (2) df.to_excel('output.xlsx') for writing the DataFrame to an Excel file, (3) df.to_json('output.json') for writing the DataFrame as a JSON file. 
        </p> 
        <conclusion>
            <p>
                <alert>Conclusion: </alert>
                Pandas simplifies the data journey: from raw files → clean tables → insightful summaries → model-ready datasets. You don't need to memorize everything. Learn the core workflow: Load data, Inspect and clean, Transform and explore, Export results or feed into models. Once you're comfortable with these steps, you’ll find Pandas becomes second nature.
            </p>
        </conclusion>
   
  </subsection>
  <conclusion>
    <p>
     There are of course many other tools for data cleaning and transformation. For instance, TensorFlow has a very powerful data paipeline that address the transformations of data ad emphasizes consistency across the entire machine learning training and presentation cycle. But, that is a bit too much to master in the beginning. It is best to first start with Pandas or similar easy to use tool. The references given above have many notebook examples for you to work through and develop your own skills. For many years, R programming language, and maybe enven now, R is a go to language for data analysts. But, since we are emphasizing the tools more common in machine learning community, we will not have much to say about R.       
    </p>
  </conclusion>
 


</section>